@model List<Shop.ViewModels.ProductDetailsViewModel>

@{
    ViewData["Title"] = "GetByCategory";
}

<p class="show-filters-button">Filtruj</p>

@await Html.PartialAsync("_FilterResultsPartial", (Shop.Common.Filters)ViewBag.Filter)

<main class="products-list">
    @if (Model.Count == 0)
    {
        <p class="no-products-info">Nie mamy obecnie żadnego produktu w wybranej kategorii</p>
    }
    else
    {
        int productListLength = Model.Count();

        for (int i = 0; i < productListLength; i++)
                {
        <div class="single-product">
            <div class="favoutites-links-container">
                @if (User.IsInRole("User"))
                {
                    @if (Model[i].IsFavourite)
                    {
                        <a class="remove-from-favourites" onclick="removeFromFavourites(@Model[i].Id, @i)"></a>
                    }
                    else
                    {
                        <a class="add-to-favourites" onclick="addToFavourites(@Model[i].Id, @i)"></a>
                    }
                }
                else if (User.IsInRole("Administrator"))
                {
                    <a asp-action="Update" asp-controller="Product" asp-route-productId="@Model[i].Id" class="single-product-admin-links">Edytuj</a>
                    <span> | </span>
                    <a asp-action="Delete" asp-controller="Product" asp-route-productId="@Model[i].Id" class="single-product-admin-links">Usuń</a>
                }
                else
                {
                    <a class="add-to-favourites" asp-action="Login" asp-controller="Account" asp-route-ReturnUrl="/Product/GetAll?gender=@Model[i].Gender&category=@Model[i].Category"></a>
                }

            </div>
            <a asp-action="Details" asp-controller="Product" asp-route-productId="@Model[i].Id">
                <img src="@Model[i].ImagePath" />
                <div class="price-container">
                    <div>
                        @if (Model[i].IsOverpriced)
                        {
                            <span class="current-price">@Model[i].FormatedNewPrice zł</span>

                            <span class="before-price">@Model[i].FormatedPrice zł</span>
                        }
                        else
                        {
                            <span class="current-price">@Model[i].FormatedPrice zł</span>
                        }
                    </div>

                    @if (Model[i].IsOverpriced)
                    {
                        <span class="discount">- @Model[i].FormatedDiscount %</span>
                    }

                </div>
                <span>@Model[i].Name</span>
            </a>

            @await Html.PartialAsync("_AddToCartPartial", new Shop.ViewModels.AddProductToCartViewModel()
           {
               Id = Model[i].Id,
               Sizes = Model[i].Sizes,
               Quantity = Model[i].Quantity,
               Image = Model[i].Image,
               Name = Model[i].Name,
               Price = Model[i].Price
           })

        </div>

        }
    }

</main>

<script src="~/js/filters.js"></script>
<script src="~/js/add-and-remove-favourite-product.js"></script>