@model List<Shop.ViewModels.ProductDetailsViewModel>

@{
    ViewData["Title"] = "GetByCategory";
}

<p class="show-filters-button">Filtruj</p>


@await Html.PartialAsync("_FilterResultsPartial", (Shop.Common.Filters)ViewBag.Filter)

<main class="products-list">
    @if (Model.Count == 0)
    {
        <p class="no-products-info">Nie mamy obecnie żadnego produktu w wybranej kategorii</p>
    }
    else
    {
        int productListLength = Model.Count();
        for ( int i= 0; i < productListLength; i++)
        {
            <div class="single-product">
                <div class="favoutites-links-container">
                    @if (User.Identity.IsAuthenticated)
                    {
                        @if (Model[i].IsFavourite)
                        {
                            <a class="remove-from-favourites" onclick="removeFromFavourites(@Model[i].Id, @i)"></a>
                        }
                        else
                        {
                            <a class="add-to-favourites" onclick="addToFavourites(@Model[i].Id, @i)"></a>
                        }
                    }
                    else
                    {
                        int gender = (int)Model[i].Gender;
                        int category = (int)Model[i].Category;
;                        <a class="add-to-favourites" asp-action="Login" asp-controller="Account"  asp-route-ReturnUrl="/Product/GetAll?gender=@gender&category=@category"></a>
                    }

                    </div>
                <a asp-action="Details" asp-controller="Product" asp-route-productId="@Model[i].Id">

                    <img src="~/assets/product.png" />
                    <div class="price-container">
                        <div>
                            <span class="current-price">@Model[i].Price.ToString("0.00") zł</span>
                            @if (Model[i].IsOverpriced)
                            {
                                string beforePrice = Model[i].BeforePrice.HasValue ? Model[i].BeforePrice.ToString() : "";
                                <span class="before-price">@beforePrice zł</span>
                            }
                        </div>
                        @if (Model[i].IsOverpriced)
                        {
                            double  discount = Model[i].BeforePrice.HasValue ? (double)(100 - Model[i].Price / Model[i].BeforePrice * 100) : 5;
                            <span class="discount">- @discount.ToString("0") %</span>
                        }

                    </div>
                    <span>@Model[i].Name</span>
                </a>
                @await Html.PartialAsync("_AddToCartPartial", new Shop.ViewModels.AddToCartViewModel() { Id = Model[i].Id, Sizes = Model[i].Sizes, Quantity = Model[i].Quantity })

                
            </div>

        }
    }

</main>

<script src="~/js/filters.js"></script>
<script src="~/js/favourites.js"></script>